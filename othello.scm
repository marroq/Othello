;*************************************************************************
;++++++++++++++++++++++VARIABLES GLOBALES+++++++++++++++++++++++++++++++++
(define player1)
(define player2)
(define jugador 1)
(define pG "x")
(define Cjuego (cons 3 3))
(define Cx "")
(define Cy "")
(define Esc "")
(define num 0)
(define newgame "")
;++++++++++++++++++++++FINALIZA VARIABLES GLOBALES++++++++++++++++++++++++
;*************************************************************************
;*************************************************************************
;++++++++++++++++++++++MODALIDAD HUMANO VRS. HUMANO+++++++++++++++++++++++
(define (H-VS-H)
	(procedure)
)
;++++++++++++++++++CONSTRUCCION DE TABLERO Y MATRIZ+++++++++++++++++++++++
(define (MOthello R C jugador)
	(define (PosOthello)
		(define (jugada)
			(newline) (newline)
			(if (= jugador 1)
				(display player1)
				(display player2)
			)
			(display " REALICE SU JUGADA")(newline)
			(define (ciclojugada)
				(newline)(display "FILA #: ")
				(define x (read))
				(display "COLUMNA #: ")
				(define y (read))
				(if (and (number? x) (number? y) (> x 0) (> y 0) (<= x 8) (<= y 8) (string=? (vector-ref (vector-ref Vothello (- x 1)) (- y 1)) " "))
					(begin
						(if (= jugador 2) 
							(begin
								(set! jugador (- jugador 1))
								(set! Cjuego (cons (- x 1) (- y 1)))
								(set! pG "o")
								(clear)
								(changes (car Cjuego) (cdr Cjuego))
							)
						)
						(if (= jugador 1)
							(begin
								(set! jugador (+ jugador 1))
								(set! Cjuego (cons (- x 1) (- y 1)))
								(set! pG "x")
								(clear)
								(changes (car Cjuego) (cdr Cjuego))	
							)
						)
					)
					(begin
						(newline)
						(display "ERROR! FILA O COLUMNA NO EXISTE") (newline)
						(display "INGRESE NUEVOS VALORES")
						(jugada)
					)
				)
			)
			(ciclojugada)
		)
;****************************************************************************
;****************************************************************************
		(define Vothello (make-vector R))
		(do ((row 0 (+ row 1)))
	    	((= row R) Vothello)
	     		(vector-set! Vothello row (make-vector C " "))
	    )
	    (vector-set! (vector-ref Vothello 3) 3 "x")
	    (vector-set! (vector-ref Vothello 4) 4 "x")
	    (vector-set! (vector-ref Vothello 3) 4 "o")
	    (vector-set! (vector-ref Vothello 4) 3 "o")
	  	(define (Tablero n)
	  		(define (NumC)
				(if (< num 8)
					(begin
						(set! num (+ 1 num))
						(display (string-append " " (number->string num)))
					)
					(begin
						(set! num 0)
						(NumC)
					)
				)
			)
	  		(vector-set! (vector-ref Vothello (car Cjuego)) (cdr Cjuego) pG)
	  		(do ((Nfilas 1 (+ Nfilas 1)))
					((= Nfilas 9))
					(display "  ") (display Nfilas)
					(display " ")
			)
			(newline)
	  		(do
				((filas 0 (+ filas 1)))
				((= filas (vector-length Vothello))
				(do
					((lineas 0 (+ lineas 1)))
					((= lineas n) (display "+"))
					(display "+") (display "---")))
				(do
					((lineas 0 (+ lineas 1)))
					((= lineas n) (display "+"))
					(display "+") (display "---")
				)
				(newline)
				(do
					((col 0 (+ col 1)))
					((= col (vector-length (vector-ref Vothello 0))) (display "|") (NumC))
					(display "|") (display " ") 
					(display (vector-ref (vector-ref Vothello filas) col))
					(display " ")
				)
				(newline)
			)
			(newline)
			(puntaje)
		)
;*************************************************************************
;+++++++++++++++++++PUNTUACION DE CADA JUGADOR++++++++++++++++++++++++++++
		(define (puntaje)
			(define rVacios 0)
			(define rP1 0)
			(define rP2 0)	
			(define (conteo c)
				(if (< c 8)
					(cond
						((string=? (vector-ref (vector-ref Vothello 0) c) " ")
							(set! rVacios (+ rVacios 1))
							(conteo (+ c 1)))
						((string=? (vector-ref (vector-ref Vothello 0) c) "x")
							(set! rP1 (+ rP1 1))
							(conteo (+ c 1)))
						((string=? (vector-ref (vector-ref Vothello 0) c) "o")
							(set! rP2 (+ rP2 1))
							(conteo (+ c 1)))
					)
					(if (< c 16)
						(cond
							((string=? (vector-ref (vector-ref Vothello 1) (- c 8)) " ")
								(set! rVacios (+ rVacios 1))
								(conteo (+ c 1)))
							((string=? (vector-ref (vector-ref Vothello 1) (- c 8)) "x")
								(set! rP1 (+ rP1 1))
								(conteo (+ c 1)))
							((string=? (vector-ref (vector-ref Vothello 1) (- c 8)) "o")
								(set! rP2 (+ rP2 1))
								(conteo (+ c 1)))
						)
						(if (< c 24)
							(cond
								((string=? (vector-ref (vector-ref Vothello 2) (- c 16)) " ")
									(set! rVacios (+ rVacios 1))
									(conteo (+ c 1)))
								((string=? (vector-ref (vector-ref Vothello 2) (- c 16)) "x")
									(set! rP1 (+ rP1 1))
									(conteo (+ c 1)))
								((string=? (vector-ref (vector-ref Vothello 2) (- c 16)) "o")
									(set! rP2 (+ rP2 1))
									(conteo (+ c 1)))
							)
							(if (< c 32)
								(cond
									((string=? (vector-ref (vector-ref Vothello 3) (- c 24)) " ")
										(set! rVacios (+ rVacios 1))
										(conteo (+ c 1)))
									((string=? (vector-ref (vector-ref Vothello 3) (- c 24)) "x")
										(set! rP1 (+ rP1 1))
										(conteo (+ c 1)))
									((string=? (vector-ref (vector-ref Vothello 3) (- c 24)) "o")
										(set! rP2 (+ rP2 1))
										(conteo (+ c 1)))
								)
								(if (< c 40)
									(cond
										((string=? (vector-ref (vector-ref Vothello 4) (- c 32)) " ")
											(set! rVacios (+ rVacios 1))
											(conteo (+ c 1)))
										((string=? (vector-ref (vector-ref Vothello 4) (- c 32)) "x")
											(set! rP1 (+ rP1 1))
											(conteo (+ c 1)))
										((string=? (vector-ref (vector-ref Vothello 4) (- c 32)) "o")
											(set! rP2 (+ rP2 1))
											(conteo (+ c 1)))
									)
									(if (< c 48)
										(cond
											((string=? (vector-ref (vector-ref Vothello 5) (- c 40)) " ")
												(set! rVacios (+ rVacios 1))
												(conteo (+ c 1)))
											((string=? (vector-ref (vector-ref Vothello 5) (- c 40)) "x")
												(set! rP1 (+ rP1 1))
												(conteo (+ c 1)))
											((string=? (vector-ref (vector-ref Vothello 5) (- c 40)) "o")
												(set! rP2 (+ rP2 1))
												(conteo (+ c 1)))
										)
										(if (< c 56)
											(cond
												((string=? (vector-ref (vector-ref Vothello 6) (- c 48)) " ")
													(set! rVacios (+ rVacios 1))
													(conteo (+ c 1)))
												((string=? (vector-ref (vector-ref Vothello 6) (- c 48)) "x")
													(set! rP1 (+ rP1 1))
													(conteo (+ c 1)))
												((string=? (vector-ref (vector-ref Vothello 6) (- c 48)) "o")
													(set! rP2 (+ rP2 1))
													(conteo (+ c 1)))
											)
											(if (< c 64)
												(cond
													((string=? (vector-ref (vector-ref Vothello 7) (- c 56)) " ")
														(set! rVacios (+ rVacios 1))
														(conteo (+ c 1)))
													((string=? (vector-ref (vector-ref Vothello 7) (- c 56)) "x")
														(set! rP1 (+ rP1 1))
														(conteo (+ c 1)))
													((string=? (vector-ref (vector-ref Vothello 7) (- c 56)) "o")
														(set! rP2 (+ rP2 1))
														(conteo (+ c 1)))
												)
											)
										)	
									)	
								)	
							)
						)
					)
				)
			)
			(conteo 0)
			;AQUI VAN LOS RESULTADOS
			(display (string-append "Espacios disponibles para fichas: " (number->string rVacios))) (newline)
			(display (string-append player1 " tiene " (number->string rP1) " fichas")) (newline)
			(display (string-append player2 " tiene " (number->string rP2) " fichas"))
			(if (zero? rVacios)
				(begin
					(newline) (newline)
					(cond
						((> rP1 rP2)
							(display (string-append "EL GANADOR ES " player1 "!!!")))
						((> rP2 rP1)
							(display (string-append "EL GANADOR ES " player2 "!!!")))
						((= rP1 rP2)
							(display (string-append "ESTO ES UN EMPATE!!!")))
					)
					(newline)
					(display "JUEGO FINALIZADO") (newline)
					(display "DESEA UN NUEVO JUEGO (y/n)? ") 
					(set! newgame (read-line))
					(cond
						((string=? newgame "y")
							(GAMEMODE))
						((string=? newgame "n")
							(cond
								((> rP1 rP2)
									(display (string-append "FELICIDADES!! EL GANADOR ES " player1 "!!! con " (number->string rP1) " puntos.")) (newline)
									(display "SALIENDO...") (newline)
									(set! newgame (read-line))
									(exit))
								(else
									(display (string-append "FELICIDADES!! EL GANADOR ES " player2 "!!! con " (number->string rP2) " puntos.")) (newline)
									(display "SALIENDO...") (newline)
									(set! newgame (read-line))
									(exit))
							)
						)	
						(else
							(display "RESPUESTA INCORRECTA")
							(newline) (newline) 
							(puntaje))
					)
				)
			)
			(jugada)
		)
;+++++++++++++++++++FINALIZA PUNTUACION DE CADA JUGADOR+++++++++++++++++++
;*************************************************************************
		(define (changes x y)
		(display (string-append "Coordenas seleccionadas: " (number->string (+ x 1)) " . " (number->string (+ y 1))))
		(newline)
;*************************************************************************
;+++++++++++++++++SUSTITUCION DIAGONAL DERECHA NEGATIVA+++++++++++++++++++
		(define (buskador)
			(define (buskadorabajoderecha x y)
				(define (abajoderecha)
					(set! x (+ 1 x))
					(set! y (+ 1 y))
					(if (and (> x 0) (> y 0) (< x 8) (< y 8))
						(cond 
							((equal? (vector-ref (vector-ref Vothello x) y) "x")
								(set! Cx "x abajo derecha")
								(abajoderecha)
							)
							((equal? (vector-ref (vector-ref Vothello x) y) "o")
								(set! Cy "o abajo derecha")
								(abajoderecha)
							)
							((equal? (vector-ref (vector-ref Vothello x) y) " ")
								(set! Esc "espacio abajo derecha")
							)
						)
					)
					;(if (string=? Esc "espacio abajo derecha")
					;	(if (equal? pG (vector-ref (vector-ref Vothello (- x 1)) (- y 1)))
					;		(vector-set! (vector-ref Vothello (- x 2)) (- y 2) pG)
					;	)
					;)
				)
				(abajoderecha)		
			)
			(buskadorabajoderecha x y)
;+++++++++++++FINALIZA SUSTITUCION DIAGONAL DERECHA NEGATIVA++++++++++++++
;*************************************************************************
;+++++++++++++++++++SUSTITUCION DIAGONAL DERECHA POSITIVA+++++++++++++++++
			(define (buskadorarrivaderecha x y)
				(define (arrivaderecha)
					(set! x (- x 1))
					(set! y (+ y 1))
					(if (and (> x 0) (> y 0) (< x 8) (< y 8))
						(cond 
								((equal? (vector-ref (vector-ref Vothello x) y) "x")
								(set! Cx "x arriba derecha")
								(arrivaderecha)
							)
							((equal? (vector-ref (vector-ref Vothello x) y) "o")
								(set! Cy "o arriba derecha")
								(arrivaderecha)
							)
							((equal? (vector-ref (vector-ref Vothello x) y) " ")
								(set! Esc "espacio arriba derecha")
							)
						)
					)
					;(if (string=? Esc "espacio arriba derecha")
					;	(if (equal? pG (vector-ref (vector-ref Vothello (+ x 1)) (- y 1)))
					;		(vector-set! (vector-ref Vothello (+ x 2)) (- y 2) pG)
					;	)
					;)		
				)
				(arrivaderecha)
			)
			(buskadorarrivaderecha x y)
;++++++++++++++FINALIZA SUSTITUCION DIAGONAL DERECHA POSITIVA+++++++++++++
;*************************************************************************
;+++++++++++++++++SUSTITUCION DIAGONAL IZQUIERDA POSITIVA+++++++++++++++++
			(define (buskadorarrivaizquierda x y)
				(define (arrivaizquierda)
					(set! x (- x 1))
					(set! y (- y 1))
					(if (and (> x 0) (> y 0) (< x 8) (< y 8))
						(cond 
							((equal? (vector-ref (vector-ref Vothello x) y) "x")
								(set! Cx "x arriba izquierda")
								(arrivaizquierda)
							)
							((equal? (vector-ref (vector-ref Vothello x) y) "o")
								(set! Cy "o arriba izquierda")
								(arrivaizquierda)
							)
							((equal? (vector-ref (vector-ref Vothello x) y) " ")
								(set! Esc "espacio arriba izquierda")
							)
						)
					)
					;(if (string=? Esc "espacio arriba izquierda")
					;	(if (equal? pG (vector-ref (vector-ref Vothello (+ x 1)) (+ y 1)))
					;		(vector-set! (vector-ref Vothello (+ x 2)) (+ y 2) pG)
					;	)
					;)
				)
				(arrivaizquierda)
			)
			(buskadorarrivaizquierda x y)
;+++++++++++++FINALIZA SUSTITUCION DIAGONAL IZQUIERDA POSITIVA++++++++++++
;*************************************************************************
;+++++++++++++++++SUSTITUCION DIAGONAL IZQUIERDA NEGATIVA+++++++++++++++++
			(define (buskadorabajoizquierda x y)
				(define (abajoizquierda)
					(set! x (+ x 1))
					(set! y (- y 1))
					(if (and (> x 0) (> y 0) (< x 8) (< y 8))
						(cond
							((equal? (vector-ref (vector-ref Vothello x) y) "x")
								(set! Cx "x abajo izquierda")
								(abajoizquierda)
							)
							((equal? (vector-ref (vector-ref Vothello x) y) "o")
								(set! Cy "o abajo izquierda")
								(abajoizquierda)
							)
							((equal? (vector-ref (vector-ref Vothello x) y) " ")
								(set! Esc "espacio abajo izquierda")
							)
						)		
					)
					;(if (string=? Esc "espacio abajo izquierda")	
					;	(if (equal? pG (vector-ref (vector-ref Vothello (- x 1)) (+ y 1)))
					;		(begin
					;		(vector-set! (vector-ref Vothello (- x 2)) (+ y 2) pG)
					;		(newline)
					;		(display x) (display y)
					;		)
					;	)
					;)
				)
				(abajoizquierda)
			)
			(buskadorabajoizquierda x y)
;+++++++++++++FINALIZA SUSTITUCION DIAGONAL IZQUIERDA NEGATIVA++++++++++++
;*************************************************************************
;+++++++++++++++++++++++++++SUSTITUCION DERECHA+++++++++++++++++++++++++++
			(define (buskadorderecha x y)
				(define (derecha)
					(define (sustitucion c)
						(if (string=? Esc "espacio derecha")
							(if (equal? pG (vector-ref (vector-ref Vothello x) (- y 1)))
								;(begin
									(vector-set! (vector-ref Vothello x) (- y c) pG)
									;(if (equal? pG (vector-ref (vector-ref Vothello x) (- y 2)))
									;	(vector-set! (vector-ref Vothello x) (- y (+ c 1)) pG)
									;)
								;)
							)
						)
					)
					(set! y (+ y 1))
					(if (and (> y 0) (< y 8))
						(cond 
							((equal? (vector-ref (vector-ref Vothello x) y) "x")
								(set! Cx "x derecha")
								(derecha)
							)
							((equal? (vector-ref (vector-ref Vothello x) y) "o")
								(set! Cy "o derecha")
								(derecha)
							)
							((equal? (vector-ref (vector-ref Vothello x) y) " ")
								(set! Esc "espacio derecha")
								(sustitucion 2)
							)
						)
					)
				)
				(derecha)			
			)
			(buskadorderecha x y)
;+++++++++++++++++++++++++FINALIZA SUSTITUCION DERECHA++++++++++++++++++++
;*************************************************************************
;+++++++++++++++++++++++++++SUSTITUCION IZQUIERDA+++++++++++++++++++++++++
			(define (buskadorizquierda x y)
				(define (izquierda)
					(set! y (- y 1))
					(if (and (> y 0)(< y 8))
						(cond 
							((equal? (vector-ref (vector-ref Vothello x) y) "x")
								(set! Cx "x izquierda")
								(izquierda)
							)
							((equal? (vector-ref (vector-ref Vothello x) y) "o")
								(set! Cy "o izquierda")
								(izquierda)
							)
							((equal? (vector-ref (vector-ref Vothello x) y) " ")
								(set! Esc "espacio izquierda")
							)
						)
					)
					(if (string=? Esc "espacio izquierda")
						(if (equal? pG (vector-ref (vector-ref Vothello x) (+ y 1)))
							(vector-set! (vector-ref Vothello x) (+ y 2) pG)
						)
					)
				)
				(izquierda)
			)
			(buskadorizquierda x y)
;++++++++++++++++++++++FINALIZA SUSTITUCION IZQUIERDA+++++++++++++++++++++
;*************************************************************************
;++++++++++++++++++++++++++++SUSTITUCION ARRIBA+++++++++++++++++++++++++++
			(define (buskadorarriva x y)
				(define (arriva)
					(set! x (- x 1))
					(if (and (> x 0)(< x 8))
						(cond 
							((equal? (vector-ref (vector-ref Vothello x) y) "x")
								(set! Cx "x arriba")
								(arriva)
							)
							((equal? (vector-ref (vector-ref Vothello x) y) "o")
								(set! Cy "o arriba")
								(arriva)
							)
							((equal? (vector-ref (vector-ref Vothello x) y) " ")
									(set! Esc "espacio arriba")
							)
						)
					)
					(if (string=? Esc "espacio arriba")
						(if (equal? pG (vector-ref (vector-ref Vothello (+ x 1)) y))
							(vector-set! (vector-ref Vothello (+ x 2)) y pG)
						)
					)
				)
				(arriva)
			)
			(buskadorarriva x y)
;++++++++++++++++++++++++FINALIZA SUSTITUCION ARRIBA++++++++++++++++++++++
;*************************************************************************
;+++++++++++++++++++++++++++++SUSTITUCION ABAJO+++++++++++++++++++++++++++
			(define (buskadoravajo x y)
				(define (avajo)
					(set! x (+ x 1))
					(if (and (> x 0) (< x 8))
						(cond 
							((equal? (vector-ref (vector-ref Vothello x) y) "x")
								(set! Cx "x abajo")
								(avajo)
							)
							((equal? (vector-ref (vector-ref Vothello x) y) "o")
								(set! Cy "o abajo")
								(avajo)
							)
							((equal? (vector-ref (vector-ref Vothello x) y) " ")
								(set! Esc "espacio abajo")
							)
						)
					)
					(if (string=? Esc "espacio abajo")
						(if (equal? pG (vector-ref (vector-ref Vothello (- x 1)) y))
							(vector-set! (vector-ref Vothello (- x 2)) y pG)
						)
					)
				)
				(avajo)
			)
			(buskadoravajo x y)
		)
;++++++++++++++++++++++++FINALIZA SUSTITUCION ABAJO+++++++++++++++++++++++
;*************************************************************************
			(if (not (or (string=? (vector-ref (vector-ref Vothello x) y) "x") (string=? (vector-ref (vector-ref Vothello x) y) "o")))
				(buskador)
				(begin
					(newline)
					(display "ERROR! POSICION OCUPADA") (newline)
					(display "INGRESE NUEVOS VALORES")
					(set! jugador (+ jugador 1))
					(jugada)
				)
			)
			(newline)
			(Tablero 8)
		)
    	(Tablero 8)
  	)
  	(PosOthello)
)
;++++++++++++++++++FINALIZA CONSTRUCCION DE TABLERO Y MATRIZ+++++++++++++++
;**************************************************************************
(define (procedure)
	(clear)
	(display "***************OTHELLO***************") (newline)
	(display "*******JUGADOR 1 VS. JUGADOR 2*******")
	(newline)
	(display "Jugador 1: ")
	(set! player1 (read-line))
	(display "COLOR DE FICHA: 'BLANCO'") (display "   ")(display "SIMBOLO A UTILIZAR 'x'") 
	(newline) (newline)
	(display "Jugador 2: ")
	(set! player2 (read-line))
	(display "COLOR DE FICHA: 'NEGRO'")(display "   ")(display "SIMBOLO A UTILIZA 'o'")
	(newline) (newline)
	(define elegir (random 4))
	(cond
		((or (= elegir 0) (= elegir 2))
			(set! jugador 1)
			(display "Inicia jugador: ")
			(display player1)
		)
		((or (= elegir 1) (= elegir 3))
			(set! jugador 2)
			(display "Inicia jugador: ")
			(display player2)
		)
	)
	(define pausa (read-line))
	(MOthello 8 8 jugador)
)
;++++++++++++++++++FINALIZA MODALIDAD HUMANO VRS. HUMANO+++++++++++++++++++
;**************************************************************************
;**************************************************************************
;++++++++++++++++++++++MODALIDAD HUMANO VRS. MAQUINA+++++++++++++++++++++++
(define (H-VS-C)
	(procedure2)
)
(define (procedure2)
	(clear)
	(display "**********                      OTHELLO                            *********") (newline)
	(display "**********                JUGADOR1 VS. MAQUINA                     *********") (newline)
	(display "Jugador: ")
	(set! player1 (read-line))
	(display "COLOR DE FICHA: 'BLANCO'") (display "   ")(display "SIMBOLO A UTILIZAR 'x'")
	(newline) (newline)
	(display "Jugador PC: ")
	(set! player2 "PC Maquina") (display player2) (newline)
	(display "COLOR DE FICHA: 'NEGRO'")(display "   ")(display "SIMBOLO A UTILIZA 'o'")
	(newline) (newline)
	(define elegir (random 4))
	(cond
		((or (= elegir 0) (= elegir 2))
			(set! jugador 1)
			(display "Inicia jugador: ")
			(display player1)
		)
		((or (= elegir 1) (= elegir 3))
			(set! jugador 2)
			(display "Inicia jugador: ")
			(display player2)
		)
	)
	(define pausa2 (read-line))
	(display "**********     MODALIDAD EN CONSTRUCCION, SE LE REDIRECCIONARA     **********") (newline)
	(display "**********           A LA MODALIDAD PLAYER1 VS. PLAYER2            **********") (newline) 
	(newline)
	(display "**********              PULSE ENTER PARA CONTINUAR...              **********") (newline)
	(define pausa (read-line))
	(clear)
	(H-VS-H)
)
;++++++++++++++++++++++FINALIZA MODALIDAD HUMANO VRS. MAQUINA++++++++++++++
;**************************************************************************
;**************************************************************************
;++++++++++++++++++++++SELECCION DE MODALIDAD DE JUEGO+++++++++++++++++++++
(define (GAMEMODE)
	(newline)
	(clear)
	(display "##############      OTHELLO     ##############") (newline)
	(display "##############   PROGRAMADORES  ##############") (newline)
	(display "######## Diego Claveria    -  13003813 #######") (newline)
	(display "######## Douglas Figueroa  -  13000530 #######") (newline)
	(display "######## Seccion:          -  BN #############") (newline)
	(display "##############################################")
	(newline) (newline)
	(display "**************MODALIDADES DE JUEGO**************")(newline)
	(display "	1-  HUMAN vrs HUMAN")(newline)
	(display "	2-  HUMAN vrs MACHINE")(newline)
	(display "SELECCIONE: ")
	(define modo (read))
	(if (and (> modo 0) (<= modo 2) (integer? modo))
		(cond
			((= modo 1)
				(H-VS-H))
			((= modo 2)
				(H-VS-C))
		)
		(begin
			(clear)
			(display "**************MODO DE JUEGO NO EXISTE**************") (newline)
			(display "**************SELECCIONE MODO DE JUEGO*************") (newline)
			(GAMEMODE)
		)
	)
)
;++++++++++++++++++++++FINALIZA SELECCION DE MODALIDAD DE JUEGO++++++++++++
;**************************************************************************
;++++++++++++++++++++++LLAMADA A MODALIDADES DE JUEGO++++++++++++++++++++++
(GAMEMODE)